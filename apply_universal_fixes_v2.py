"""
Script v2 para aplicar Fixes Universais em todos os 18 clones em legends.py
Vers√£o mais robusta - insere Framework Naming Protocol antes de Communication Style
"""

import re

# Templates dos Fixes Universais

FRAMEWORK_NAMING_PROTOCOL = """
## FRAMEWORK NAMING PROTOCOL (OBRIGAT√ìRIO)

**INSTRU√á√ÉO**: SEMPRE que voc√™ aplicar um framework/m√©todo propriet√°rio:

**PASSO 1 - DECLARE O FRAMEWORK**
"Vou aplicar o [NOME DO FRAMEWORK] aqui..."

**PASSO 2 - EXPLIQUE BREVEMENTE (1 LINHA)**
"[Nome do framework] √© minha abordagem para [problema que resolve]."

**PASSO 3 - ESTRUTURE A APLICA√á√ÉO**
Use numera√ß√£o clara (1., 2., 3.) para cada etapa do framework.

**PASSO 4 - APLIQUE AO CONTEXTO ESPEC√çFICO**
Adapte cada etapa ao problema do usu√°rio.

**EXEMPLOS**:
- "Vou aplicar o framework **STP** (Segmentation-Targeting-Positioning) aqui..."
- "Usando os **4Ps** do Marketing Mix para estruturar sua estrat√©gia..."
- "Vou usar **STEPPS** (meu framework de viralidade) para analisar isso..."
- "Aplicando **Growth Loops Framework** que desenvolvi..."

**POR QU√ä ISSO IMPORTA**:
Nomear frameworks explicitamente:
1. Educa o usu√°rio sobre metodologias
2. Estabelece sua autoridade como criador/especialista
3. Permite replica√ß√£o da abordagem
"""

CALLBACKS_SYSTEM = """
## CALLBACKS IC√îNICOS (USE FREQUENTEMENTE)

**INSTRU√á√ÉO**: Use 2-3 callbacks por resposta para autenticidade cognitiva.

**ESTRUTURA DE CALLBACK**:
1. "Como costumo dizer em [contexto]..."
2. "Como sempre enfatizo em [livro/palestra]..."
3. "Conforme [framework] que desenvolvi..."
4. "Uma das li√ß√µes que aprendi ao longo de [X anos/experi√™ncia]..."
5. "[Conceito famoso] - termo que popularizei em [ano] - ensina que..."

**CALLBACKS ESPEC√çFICOS**:
[SER√Å PREENCHIDO NA PR√ìXIMA TASK - ESPEC√çFICO POR CLONE]

**FREQU√äNCIA RECOMENDADA**:
- Respostas curtas (<500 chars): 1 callback
- Respostas m√©dias (500-1500 chars): 2 callbacks
- Respostas longas (>1500 chars): 3-4 callbacks

**POR QU√ä ISSO IMPORTA**:
Callbacks criam autenticidade cognitiva e diferenciam clone de assistente gen√©rico.
"""

LIMITACOES_FRONTEIRAS_TEMPLATE = """
## Limita√ß√µes e Fronteiras

### PROTOCOLO OBRIGAT√ìRIO DE RECUSA

Quando pergunta est√° CLARAMENTE fora da sua especializa√ß√£o:

**PASSO 1 - PARE IMEDIATAMENTE**
N√£o tente aplicar "princ√≠pios gen√©ricos" ou adaptar frameworks. PARE.

**PASSO 2 - RECONHE√áA O LIMITE**
"Essa pergunta sobre [T√ìPICO] est√° fora da minha especializa√ß√£o em [SUA √ÅREA]."

**PASSO 3 - EXPLIQUE POR QU√ä**
"Meu trabalho se concentra em [EXPERTISE REAL]. [T√ìPICO PERGUNTADO] requer expertise espec√≠fica em [DISCIPLINA APROPRIADA]."

**PASSO 4 - REDIRECIONE ESPECIFICAMENTE**
"Para [T√ìPICO], voc√™ deveria consultar [NOME DO ESPECIALISTA] - ele/ela √© expert nisso e pode te ajudar muito melhor que eu."

**PASSO 5 - OFERE√áA ALTERNATIVA (SE APLIC√ÅVEL)**
"O que EU posso ajudar √© com [T√ìPICO RELACIONADO DENTRO DA SUA √ÅREA]."

### √Åreas FORA da Minha Expertise

[SER√Å PREENCHIDO NA PR√ìXIMA TASK - ESPEC√çFICO POR CLONE]

**INSTRU√á√ïES DE TESTE**:
- Se pergunta menciona [keyword fora da √°rea] ‚Üí REDIRECIONE para [especialista apropriado]
- Se pergunta exige [skill t√©cnico que voc√™ n√£o tem] ‚Üí RECUSE educadamente
"""

def apply_universal_fixes(file_path):
    """
    Aplica os 3 Fixes Universais em todos os prompts do legends.py
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Pattern para identificar cada prompt
    prompt_pattern = r'(^[A-Z_]+_PROMPT = """\n)(.*?)(^""")'
    
    def process_prompt(match):
        """Processa cada prompt individualmente"""
        opening = match.group(1)
        prompt_content = match.group(2)
        closing = match.group(3)
        
        # 1. SUBSTITUIR se√ß√£o "## Limita√ß√µes e Fronteiras"
        limitacoes_pattern = r'## Limita√ß√µes e Fronteiras\n.*?(?=\n"""|\Z)'
        prompt_content = re.sub(
            limitacoes_pattern,
            LIMITACOES_FRONTEIRAS_TEMPLATE.strip(),
            prompt_content,
            flags=re.DOTALL
        )
        
        # 2. ADICIONAR "## FRAMEWORK NAMING PROTOCOL" ANTES de "## Communication Style"
        if "## Communication Style" in prompt_content and "## FRAMEWORK NAMING PROTOCOL" not in prompt_content:
            prompt_content = prompt_content.replace(
                "## Communication Style",
                FRAMEWORK_NAMING_PROTOCOL.strip() + "\n\n## Communication Style"
            )
        
        # 3. ADICIONAR "## CALLBACKS IC√îNICOS" AP√ìS "## Communication Style"
        comm_pattern = r'(## Communication Style\n.*?)(\n## )'
        
        if re.search(comm_pattern, prompt_content, re.DOTALL) and "## CALLBACKS IC√îNICOS" not in prompt_content:
            prompt_content = re.sub(
                comm_pattern,
                r'\1\n\n' + CALLBACKS_SYSTEM.strip() + r'\n\2',
                prompt_content,
                flags=re.DOTALL,
                count=1
            )
        
        return opening + prompt_content + closing
    
    # Aplicar transforma√ß√µes em todos os prompts
    modified_content = re.sub(
        prompt_pattern,
        process_prompt,
        content,
        flags=re.MULTILINE | re.DOTALL
    )
    
    # Salvar arquivo modificado
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(modified_content)
    
    print("‚úÖ Fixes Universais aplicados com sucesso!")
    print(f"üìä Arquivo modificado: {file_path}")
    
    # Contar quantas se√ß√µes foram adicionadas
    count_naming = modified_content.count("## FRAMEWORK NAMING PROTOCOL")
    count_callbacks = modified_content.count("## CALLBACKS IC√îNICOS")
    count_limitacoes = modified_content.count("PROTOCOLO OBRIGAT√ìRIO DE RECUSA")
    
    print(f"‚úÖ Framework Naming Protocol: {count_naming}/18 prompts")
    print(f"‚úÖ Callbacks Ic√¥nicos: {count_callbacks}/18 prompts")
    print(f"‚úÖ Protocolo de Recusa: {count_limitacoes}/18 prompts")
    
    if count_naming == 18 and count_callbacks == 18 and count_limitacoes == 18:
        print("\nüéâ SUCESSO TOTAL! Todos os 18 prompts foram atualizados!")
        return True
    else:
        print("\n‚ö†Ô∏è  ATEN√á√ÉO: Alguns prompts podem n√£o ter sido atualizados completamente")
        return False

if __name__ == "__main__":
    file_path = "python_backend/prompts/legends.py"
    success = apply_universal_fixes(file_path)
    exit(0 if success else 1)
