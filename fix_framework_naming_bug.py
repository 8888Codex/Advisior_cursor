#!/usr/bin/env python3
"""
FIX CR√çTICO: Remove exemplos de frameworks errados do template universal

PROBLEMA: Template do FRAMEWORK NAMING PROTOCOL cont√©m exemplos como:
- "STEPPS (meu framework)" ‚Üí √â de Jonah Berger, n√£o de Philip Kotler!
- "Growth Loops Framework que desenvolvi" ‚Üí √â de Brian Balfour!

Esses exemplos est√£o fazendo TODOS os 18 clones roubarem cr√©dito de frameworks
que n√£o criaram.

SOLU√á√ÉO: Substituir exemplos problem√°ticos por exemplos GEN√âRICOS que podem
ser usados por qualquer clone.
"""

import re

# Ler arquivo atual
with open("python_backend/prompts/legends.py", "r", encoding="utf-8") as f:
    content = f.read()

# Padr√£o problem√°tico a ser substitu√≠do
OLD_EXAMPLES = '''**EXEMPLOS**:
- "Vou aplicar o framework **STP** (Segmentation-Targeting-Positioning) aqui..."
- "Usando os **4Ps** do Marketing Mix para estruturar sua estrat√©gia..."
- "Vou usar **STEPPS** (meu framework de viralidade) para analisar isso..."
- "Aplicando **Growth Loops Framework** que desenvolvi..."'''

# Novos exemplos GEN√âRICOS (sem roubar cr√©dito de ningu√©m)
NEW_EXAMPLES = '''**EXEMPLOS GEN√âRICOS** (adapte aos seus pr√≥prios frameworks):
- "Vou aplicar o framework **[SEU FRAMEWORK]** aqui..."
- "Usando **[SUA METODOLOGIA]** para estruturar esta an√°lise..."
- "Conforme o modelo **[SEU MODELO]** que desenvolvi..."
- "Aplicando os princ√≠pios de **[SEU CONCEITO]** neste caso..."'''

# Contar quantas vezes aparece (deve ser ~18 vezes, uma por clone)
count_before = content.count("STEPPS")
print(f"üîç Encontradas {count_before} ocorr√™ncias de 'STEPPS' (framework de Jonah Berger)")

count_growth_loops = content.count("Growth Loops Framework")
print(f"üîç Encontradas {count_growth_loops} ocorr√™ncias de 'Growth Loops Framework' (de Brian Balfour)")

# Substituir TODAS as ocorr√™ncias do padr√£o problem√°tico
content_fixed = content.replace(OLD_EXAMPLES, NEW_EXAMPLES)

# Verificar quantas substitui√ß√µes foram feitas
count_after_stepps = content_fixed.count("STEPPS")
count_after_growth = content_fixed.count("Growth Loops Framework")

print(f"\n‚úÖ Substitui√ß√µes realizadas:")
print(f"   - STEPPS: {count_before} ‚Üí {count_after_stepps}")
print(f"   - Growth Loops: {count_growth_loops} ‚Üí {count_after_growth}")

# Salvar arquivo corrigido
with open("python_backend/prompts/legends.py", "w", encoding="utf-8") as f:
    f.write(content_fixed)

print(f"\n‚úì Arquivo corrigido: python_backend/prompts/legends.py")
print(f"‚úì Template universal agora usa exemplos GEN√âRICOS")
print(f"‚úì Cada clone deve usar apenas seus PR√ìPRIOS frameworks nos callbacks espec√≠ficos")
