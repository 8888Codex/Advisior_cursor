from fastapi import APIRouter, HTTPException, Request
from typing import List, Optional
from slowapi import Limiter
from slowapi.util import get_remote_address

from python_backend.models import (
    CouncilConversation, CouncilConversationCreate, CouncilMessage, MessageSend, MessageReaction
)
from python_backend.storage import storage
from python_backend.crew_agent import LegendAgentFactory

router = APIRouter(
    tags=["Council Chat"],
)

limiter = Limiter(key_func=get_remote_address)

@router.post("/api/council/conversations", response_model=CouncilConversation, status_code=201)
@limiter.limit("10/hour")
async def create_council_conversation(request: Request, data: CouncilConversationCreate):
    """
    Cria nova conversa com conselho de especialistas.
    
    Requisitos:
    - personaId: Obrigat√≥rio (deve existir)
    - expertIds: Lista com pelo menos 2 especialistas
    - problem: Descri√ß√£o do problema (m√≠nimo 10 caracteres)
    """
    user_id = "default_user"
    
    try:
        # Validar persona
        persona = await storage.get_persona(data.personaId)
        if not persona:
            raise HTTPException(
                status_code=404,
                detail=f"Persona com ID {data.personaId} n√£o encontrada. Crie uma persona primeiro."
            )
        
        # Validar especialistas
        if not data.expertIds or len(data.expertIds) < 1:
            raise HTTPException(
                status_code=400,
                detail="Selecione pelo menos 1 especialista para a conversa."
            )
        
        experts = []
        for expert_id in data.expertIds:
            expert = await storage.get_expert(expert_id)
            if not expert:
                raise HTTPException(
                    status_code=404,
                    detail=f"Especialista {expert_id} n√£o encontrado."
                )
            experts.append(expert)
        
        # Validar problema
        if not data.problem or len(data.problem.strip()) < 10:
            raise HTTPException(
                status_code=400,
                detail="Descri√ß√£o do problema deve ter pelo menos 10 caracteres."
            )
        
        # Criar conversa
        conversation = await storage.create_council_conversation(
            user_id=user_id,
            persona_id=data.personaId,
            problem=data.problem,
            expert_ids=data.expertIds,
            analysis_id=data.analysisId  # J√° √© Optional[str] no modelo
        )
        
        # Criar mensagem inicial do sistema
        await storage.create_council_message(
            conversation_id=conversation.id,
            role="system",
            content=f"Conselho iniciado com {len(experts)} especialista(s). Problema: {data.problem}"
        )
        
        print(f"[Council Chat] Conversa criada: {conversation.id} com {len(experts)} especialistas")
        return conversation
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"[Council Chat] Erro ao criar conversa: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao criar conversa: {str(e)}"
        )

@router.get("/api/council/conversations", response_model=List[CouncilConversation])
async def get_council_conversations():
    """Lista todas as conversas do conselho do usu√°rio"""
    user_id = "default_user"
    return await storage.get_council_conversations(user_id)

@router.get("/api/council/conversations/{conversation_id}", response_model=CouncilConversation)
async def get_council_conversation(conversation_id: str):
    """Obt√©m uma conversa espec√≠fica do conselho"""
    conversation = await storage.get_council_conversation(conversation_id)
    if not conversation:
        raise HTTPException(status_code=404, detail="Conversa n√£o encontrada")
    return conversation

@router.get("/api/council/conversations/{conversation_id}/messages", response_model=List[CouncilMessage])
async def get_council_messages(conversation_id: str):
    """Obt√©m todas as mensagens de uma conversa do conselho"""
    # Verificar se conversa existe
    conversation = await storage.get_council_conversation(conversation_id)
    if not conversation:
        raise HTTPException(status_code=404, detail="Conversa n√£o encontrada")
    
    messages = await storage.get_council_messages(conversation_id)
    return messages

async def _process_council_message_background(conversation_id: str, message_content: str):
    """Processa mensagem do conselho em background"""
    import asyncio
    
    try:
        # Buscar conversa
        conversation = await storage.get_council_conversation(conversation_id)
        if not conversation:
            print(f"[Council Chat Background] Conversa {conversation_id} n√£o encontrada")
            return
        
        # Buscar persona
        persona = await storage.get_persona(conversation.personaId)
        if not persona:
            print(f"[Council Chat Background] Persona n√£o encontrada")
            return
        
        # Buscar especialistas
        experts = []
        for expert_id in conversation.expertIds:
            expert = await storage.get_expert(expert_id)
            if not expert:
                print(f"[Council Chat Background] Aviso: Especialista {expert_id} n√£o encontrado, pulando...")
                continue
            experts.append(expert)
        
        if not experts:
            print(f"[Council Chat Background] Nenhum especialista v√°lido encontrado")
            return
        
        # Buscar hist√≥rico da conversa (j√° inclui a mensagem do usu√°rio que foi salva antes)
        history = await storage.get_council_messages(conversation_id)
        
        print(f"[Council Chat Background] Obtendo respostas de {len(experts)} especialistas...")
        
        # Buscar an√°lise inicial se dispon√≠vel
        analysis_context = ""
        if conversation.analysisId:
            try:
                analysis = await storage.get_council_analysis(conversation.analysisId)
                if analysis:
                    analysis_context = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    CONTEXTO DA AN√ÅLISE INICIAL DO CONSELHO                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

**PROBLEMA ORIGINAL:**
{analysis.problem}

**CONSENSO ESTRAT√âGICO GERADO PELO CONSELHO:**
{analysis.consensus}

"""
                    if analysis.contributions:
                        analysis_context += "**CONTRIBUI√á√ïES INICIAIS DOS ESPECIALISTAS:**\n"
                        for contrib in analysis.contributions:
                            analysis_context += f"\n--- {contrib.expertName} ---\n"
                            if contrib.keyInsights:
                                analysis_context += "Insights: " + ", ".join(contrib.keyInsights[:3]) + "\n"
                            if contrib.recommendations:
                                analysis_context += "Recomenda√ß√µes: " + ", ".join(contrib.recommendations[:3]) + "\n"
                        analysis_context += "\n"
                    if analysis.actionPlan:
                        analysis_context += "**PLANO DE A√á√ÉO CRIADO:**\n"
                        analysis_context += f"Total de {len(analysis.actionPlan.phases)} fases | Dura√ß√£o: {analysis.actionPlan.totalDuration}\n\n"
            except Exception as e:
                print(f"[Council Chat Background] Erro ao buscar an√°lise inicial: {e}")
                analysis_context = ""
        
        # Para cada especialista, gerar resposta
        for expert in experts:
            try:
                conversation_history = ""
                if history:
                    conversation_history = "\n\n**HIST√ìRICO DA CONVERSA (√∫ltimas mensagens):**\n"
                    for msg in history[-15:]:
                        if msg.role == "user":
                            conversation_history += f"\nüë§ Usu√°rio: {msg.content}\n"
                        elif msg.role == "expert":
                            conversation_history += f"\nüë®‚Äçüíº {msg.expertName}: {msg.content[:200]}...\n"
                
                persona_context = f"""
[CONTEXTO DO CLIENTE IDEAL - PERSONA]:
Nome: {persona.name}
Objetivos: {', '.join(persona.goals[:5]) if persona.goals else 'N√£o especificados'}
Pain Points: {', '.join(persona.painPoints[:5]) if persona.painPoints else 'N√£o especificados'}
Valores: {', '.join(persona.values[:5]) if persona.values else 'N√£o especificados'}

IMPORTANTE: Suas recomenda√ß√µes devem ser espec√≠ficas para este perfil de cliente ideal.
"""
                
                messages_for_claude = []
                for msg in history:
                    if msg.role == "user":
                        messages_for_claude.append({"role": "user", "content": msg.content})
                    elif msg.role == "expert":
                        expert_msg_content = f"[{msg.expertName}]: {msg.content}"
                        messages_for_claude.append({"role": "assistant", "content": expert_msg_content})
                
                messages_for_claude.append({"role": "user", "content": message_content})
                
                enriched_system_prompt = expert.systemPrompt
                if analysis_context:
                    enriched_system_prompt += "\n\n" + analysis_context
                enriched_system_prompt += "\n\n" + persona_context
                if conversation_history:
                    enriched_system_prompt += "\n\n" + conversation_history
                
                enriched_system_prompt += f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    INSTRU√á√ïES PARA A CONVERSA COLABORATIVA                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

**VOC√ä EST√Å EM UMA MESA DE CONVERSA COM OUTROS ESPECIALISTAS:**

1. Voc√™ TEM ACESSO COMPLETO ao contexto da an√°lise inicial, incluindo:
   - O problema original que foi analisado
   - O consenso estrat√©gico gerado pelo conselho
   - As contribui√ß√µes de todos os especialistas (incluindo voc√™)
   - O plano de a√ß√£o completo que foi criado

2. Quando o usu√°rio mencionar "plano", "plano de a√ß√£o", "fases", "a√ß√µes", etc., 
   VOC√ä DEVE fazer refer√™ncia ao plano de a√ß√£o que foi criado anteriormente.

3. Voc√™ pode debater, questionar ou complementar as opini√µes dos outros especialistas.

4. Mantenha seu pr√≥prio estilo, framework e metodologia, mas seja colaborativo.

5. Se o usu√°rio perguntar sobre algo relacionado √† an√°lise inicial ou ao plano,
   use esse contexto para responder de forma precisa e detalhada.

6. Esta √© uma conversa cont√≠nua - todos os especialistas est√£o "na mesma mesa" 
   e compartilham o mesmo contexto completo.
"""
                
                agent = LegendAgentFactory.create_agent(expert.name, enriched_system_prompt)
                ai_response = await agent.chat(messages_for_claude, message_content)
                
                await storage.create_council_message(
                    conversation_id=conversation_id,
                    expert_id=expert.id,
                    expert_name=expert.name,
                    role="expert",
                    content=ai_response
                )
                
                print(f"[Council Chat Background] Resposta de {expert.name} gerada e salva")
                
            except Exception as e:
                print(f"[Council Chat Background] Erro ao gerar resposta de {expert.name}: {e}")
                import traceback
                traceback.print_exc()
                continue
        
        print(f"[Council Chat Background] Processamento completo para conversa {conversation_id}")
        
    except Exception as e:
        print(f"[Council Chat Background] Erro geral: {e}")
        import traceback
        traceback.print_exc()

@router.post("/api/council/conversations/{conversation_id}/messages", status_code=202)
@limiter.limit("30/minute")
async def send_message_to_council(request: Request, conversation_id: str, data: MessageSend):
    """
    Envia mensagem para o conselho e recebe respostas de todos os especialistas.
    
    RETORNA IMEDIATAMENTE (202 Accepted) e processa em background.
    O cliente deve fazer polling em /api/council/conversations/{id}/messages para
    verificar quando as respostas dos especialistas estiverem prontas.
    """
    import asyncio
    
    try:
        # Validar que a conversa existe
        conversation = await storage.get_council_conversation(conversation_id)
        if not conversation:
            raise HTTPException(status_code=404, detail="Conversa n√£o encontrada")
        
        # Salvar mensagem do usu√°rio imediatamente
        user_message = await storage.create_council_message(
            conversation_id=conversation_id,
            role="user",
            content=data.content
        )
        
        # Processar respostas em background (n√£o bloqueia a resposta)
        asyncio.create_task(_process_council_message_background(conversation_id, data.content))
        
        # Retornar imediatamente
        return {
            "status": "processing",
            "message": "Mensagem recebida. Processando respostas dos especialistas em background...",
            "userMessage": user_message,
            "conversationId": conversation_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"[Council Chat] Erro ao iniciar processamento: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao processar mensagem: {str(e)}"
        )

@router.post("/api/council/conversations/{conversation_id}/messages/{message_id}/reactions", status_code=201)
@limiter.limit("20/minute")
async def add_message_reaction(
    request: Request,
    conversation_id: str,
    message_id: str,
    reaction: MessageReaction
):
    """Adiciona rea√ß√£o de um especialista a uma mensagem de outro"""
    # Verificar se conversa existe
    conversation = await storage.get_council_conversation(conversation_id)
    if not conversation:
        raise HTTPException(status_code=404, detail="Conversa n√£o encontrada")
    
    # Adicionar rea√ß√£o
    success = await storage.add_council_message_reaction(message_id, reaction)
    if not success:
        raise HTTPException(status_code=404, detail="Mensagem n√£o encontrada")
    
    return {"success": True, "reaction": reaction}

