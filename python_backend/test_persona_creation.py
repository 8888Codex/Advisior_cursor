"""
Script para testar a cria√ß√£o de personas com tratamento de erros aprimorado
"""
import os
import json
import asyncio
from dotenv import load_dotenv, find_dotenv

# Carregar vari√°veis de ambiente
env_file = find_dotenv(usecwd=True)
if env_file:
    load_dotenv(env_file)
    print(f"[ENV] Carregado .env de: {env_file}")
else:
    print("[ENV] Arquivo .env n√£o encontrado!")

# Importar m√≥dulos necess√°rios
from reddit_research import reddit_research
from models_persona import PersonaModern, PersonaModernCreate

async def test_persona_creation():
    """Teste a cria√ß√£o de personas com tratamento de erros aprimorado"""
    print("\nüß™ TESTANDO CRIA√á√ÉO DE PERSONAS")
    print("=" * 60)
    
    # Dados de teste
    target_description = "Profissional de marketing digital freelancer"
    industry = "Marketing e Publicidade"
    additional_context = "Especializado em estrat√©gias de conte√∫do para pequenas empresas"
    
    try:
        print(f"\n1Ô∏è‚É£ Testando pesquisa r√°pida para '{target_description}'")
        quick_data = await reddit_research.research_quick(
            target_description=target_description,
            industry=industry
        )
        
        if quick_data:
            print(f"‚úÖ Pesquisa r√°pida conclu√≠da com sucesso!")
            print(f"üìä Dados obtidos:")
            print(f"  ‚Ä¢ Job Statement: {quick_data.get('job_to_be_done', {}).get('statement', 'N/A')}")
            print(f"  ‚Ä¢ Comportamentos: {len(quick_data.get('behaviors', {}).get('online', []))} comportamentos online")
            print(f"  ‚Ä¢ Pontos de dor: {len(quick_data.get('pain_points_quantified', []))} pontos de dor quantificados")
        else:
            print(f"‚ùå Falha na pesquisa r√°pida: Nenhum dado retornado")
        
        print(f"\n2Ô∏è‚É£ Testando pesquisa estrat√©gica para '{target_description}'")
        strategic_data = await reddit_research.research_strategic(
            target_description=target_description,
            industry=industry,
            additional_context=additional_context
        )
        
        if strategic_data:
            print(f"‚úÖ Pesquisa estrat√©gica conclu√≠da com sucesso!")
            print(f"üìä Dados obtidos:")
            print(f"  ‚Ä¢ Job Statement: {strategic_data.get('job_to_be_done', {}).get('statement', 'N/A')}")
            print(f"  ‚Ä¢ Comportamentos: {len(strategic_data.get('behaviors', {}).get('online', []))} comportamentos online")
            print(f"  ‚Ä¢ Aspira√ß√µes: {len(strategic_data.get('aspirations', []))} aspira√ß√µes")
            print(f"  ‚Ä¢ Objetivos: {len(strategic_data.get('goals', []))} objetivos")
            print(f"  ‚Ä¢ Pontos de dor: {len(strategic_data.get('pain_points_quantified', []))} pontos de dor quantificados")
            print(f"  ‚Ä¢ Comunidades: {len(strategic_data.get('communities', []))} comunidades")
        else:
            print(f"‚ùå Falha na pesquisa estrat√©gica: Nenhum dado retornado")
        
        # Salvar os resultados em um arquivo para inspe√ß√£o
        with open("test_persona_results.json", "w", encoding="utf-8") as f:
            json.dump({
                "quick": quick_data,
                "strategic": strategic_data
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ Resultados salvos em test_persona_results.json")
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {str(e)}")
    
    print("\n" + "=" * 60)
    print("‚úÖ TESTE CONCLU√çDO")

if __name__ == "__main__":
    asyncio.run(test_persona_creation())
