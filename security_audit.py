import requests
import json

print("üîí AUDITORIA DE SEGURAN√áA")
print("=========================\n")

print("1. AUTENTICA√á√ÉO E AUTORIZA√á√ÉO")
print("------------------------------")
print("‚ùå Sem sistema de autentica√ß√£o")
print("   - N√£o h√° login/registro")
print("   - N√£o h√° prote√ß√£o de rotas")
print("   - User ID hardcoded como 'default_user'")
print("   - Qualquer pessoa pode acessar TODOS os endpoints\n")

print("2. ROTAS ADMINISTRATIVAS SEM PROTE√á√ÉO")
print("---------------------------------------")
# Test if we can create experts without auth
try:
    response = requests.post("http://localhost:5001/api/experts", 
        json={
            "name": "Malicious Expert",
            "title": "Hacker",
            "expertise": ["Hacking"],
            "bio": "Test security",
            "systemPrompt": "I am evil",
            "category": "marketing"
        })
    
    if response.status_code in [200, 201]:
        print("   ‚ùå CR√çTICO: Qualquer um pode criar experts")
        print(f"      Expert malicioso criado: {response.json()['id']}\n")
    else:
        print(f"   Status: {response.status_code}\n")
except Exception as e:
    print(f"   Erro: {e}\n")

print("3. VALIDA√á√ÉO DE INPUTS")
print("-----------------------")

# Test XSS in expert name
try:
    response = requests.post("http://localhost:5001/api/experts",
        json={
            "name": "<script>alert('XSS')</script>",
            "title": "Test",
            "expertise": ["Test"],
            "bio": "Test",
            "systemPrompt": "Test",
            "category": "marketing"
        })
    
    if response.status_code in [200, 201]:
        print("   ‚ö†Ô∏è  Aceita HTML/JavaScript em campos de texto")
        print("      Potencial XSS se n√£o sanitizado no frontend\n")
except Exception as e:
    pass

# Test SQL injection (though using MemStorage, not SQL)
print("   ‚ÑπÔ∏è  Storage atual: MemStorage (n√£o vulner√°vel a SQL injection)")
print("      MAS: Se migrar para SQL sem parametriza√ß√£o, ser√° vulner√°vel\n")

# Test message size limits
print("4. RATE LIMITING E LIMITES")
print("---------------------------")
print("   ‚ùå Sem rate limiting vis√≠vel")
print("   ‚ùå Sem limite de tamanho de mensagens")
print("   ‚ùå Sem timeout configurado")
print("   ‚ö†Ô∏è  Poss√≠vel abuso: spam de mensagens/criar experts infinitos\n")

print("5. API KEYS E SECRETS")
print("----------------------")
print("   ‚úÖ .env est√° no .cursorignore (n√£o commitado)")
print("   ‚ùå N√£o h√° .env.example como guia")
print("   ‚ö†Ô∏è  API keys s√£o usadas no backend (correto)")
print("   ‚úÖ Frontend n√£o exp√µe API keys\n")

print("6. CORS E CSP")
print("--------------")
print("   ‚ö†Ô∏è  CORS: allow_origins=['*'] (permite qualquer origem)")
print("   ‚ùå Sem Content Security Policy")
print("   ‚ùå Sem prote√ß√£o contra CSRF\n")

print("7. DADOS SENS√çVEIS")
print("-------------------")
print("   ‚úÖ Senhas n√£o s√£o armazenadas (sem auth)")
print("   ‚ö†Ô∏è  Perfis de neg√≥cio n√£o t√™m owner (default_user)")
print("   ‚ùå Qualquer um pode ver/editar qualquer perfil\n")

print("8. HTTPS/TLS")
print("-------------")
print("   ‚ö†Ô∏è  Desenvolvimento: HTTP (normal)")
print("   ‚ö†Ô∏è  Produ√ß√£o: DEVE usar HTTPS (n√£o configurado)\n")

print("\nüìä SCORE DE SEGURAN√áA: 3/10")
print("============================")
print("CR√çTICO:")
print("  ‚Ä¢ Sem autentica√ß√£o")
print("  ‚Ä¢ Sem autoriza√ß√£o em rotas admin")
print("  ‚Ä¢ CORS aberto para todos")
print("  ‚Ä¢ Sem rate limiting")
print("\nALTO:")
print("  ‚Ä¢ Sem valida√ß√£o robusta de inputs")
print("  ‚Ä¢ Sem CSP/CSRF protection")
print("  ‚Ä¢ User isolation inexistente")
print("\nM√âDIO:")
print("  ‚Ä¢ Falta .env.example")
print("  ‚Ä¢ Falta HTTPS config para produ√ß√£o")
