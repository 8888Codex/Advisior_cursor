"""
Script para aplicar Callbacks Espec√≠ficos e √Åreas FORA da Expertise
em todos os 18 clones em legends.py
"""

import re
from specific_callbacks_data import SPECIFIC_DATA

def format_callbacks(callbacks):
    """Formata lista de callbacks para inser√ß√£o no prompt"""
    formatted = []
    for i, callback in enumerate(callbacks, 1):
        formatted.append(f"{i}. {callback}")
    return "\n".join(formatted)

def format_fora_expertise(areas):
    """Formata √°reas FORA da expertise para inser√ß√£o no prompt"""
    formatted = []
    for i, (area, keywords, experts) in enumerate(areas, 1):
        formatted.append(f"""
{i}. **{area}**
   - Keywords de trigger: {keywords}
   - ‚Üí **REDIRECIONE para**: {experts}""")
    return "\n".join(formatted)

def apply_specific_fixes(file_path):
    """Aplica callbacks espec√≠ficos e √°reas FORA da expertise"""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Para cada clone, substituir placeholders
    for prompt_name, data in SPECIFIC_DATA.items():
        # Encontrar o prompt espec√≠fico
        prompt_pattern = rf'({prompt_name}_PROMPT = """.*?)(\[SER√Å PREENCHIDO NA PR√ìXIMA TASK - ESPEC√çFICO POR CLONE\])(.*?""")'
        
        matches = list(re.finditer(prompt_pattern, content, re.DOTALL))
        
        if len(matches) >= 2:
            # Primeiro placeholder: CALLBACKS ESPEC√çFICOS
            callbacks_text = format_callbacks(data['callbacks'])
            
            # Segundo placeholder: √Åreas FORA da Expertise
            fora_text = format_fora_expertise(data['fora_expertise'])
            
            # Substituir placeholders
            # Estrat√©gia: substituir um de cada vez de tr√°s para frente (para n√£o quebrar √≠ndices)
            
            # Encontrar todos os placeholders neste prompt
            prompt_start = content.find(f'{prompt_name}_PROMPT = """')
            prompt_end = content.find('"""', content.find('"""', prompt_start) + 3) + 3
            prompt_content = content[prompt_start:prompt_end]
            
            # Substituir placeholders
            modified_prompt = prompt_content
            
            # Substituir na se√ß√£o CALLBACKS ESPEC√çFICOS
            modified_prompt = modified_prompt.replace(
                "**CALLBACKS ESPEC√çFICOS**:\n[SER√Å PREENCHIDO NA PR√ìXIMA TASK - ESPEC√çFICO POR CLONE]",
                f"**CALLBACKS ESPEC√çFICOS DE {prompt_name.replace('_', ' ').title()}**:\n{callbacks_text}"
            )
            
            # Substituir na se√ß√£o √Åreas FORA da Expertise
            modified_prompt = re.sub(
                r'### √Åreas FORA da Minha Expertise\n+\[SER√Å PREENCHIDO NA PR√ìXIMA TASK - ESPEC√çFICO POR CLONE\]',
                f"### √Åreas FORA da Minha Expertise\n{fora_text}",
                modified_prompt
            )
            
            # Substituir no conte√∫do completo
            content = content[:prompt_start] + modified_prompt + content[prompt_end:]
            
            print(f"‚úÖ {prompt_name}: Callbacks e √°reas FORA aplicados")
        else:
            print(f"‚ö†Ô∏è  {prompt_name}: N√£o encontrado ou estrutura inesperada ({len(matches)} matches)")
    
    # Salvar arquivo modificado
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("\n‚úÖ Fixes Espec√≠ficos aplicados com sucesso!")
    print(f"üìä Arquivo modificado: {file_path}")
    
    # Verificar se todos os placeholders foram substitu√≠dos
    remaining_placeholders = content.count("[SER√Å PREENCHIDO NA PR√ìXIMA TASK - ESPEC√çFICO POR CLONE]")
    
    if remaining_placeholders == 0:
        print("üéâ Todos os placeholders foram substitu√≠dos!")
        return True
    else:
        print(f"‚ö†Ô∏è  Ainda restam {remaining_placeholders} placeholders n√£o substitu√≠dos")
        return False

if __name__ == "__main__":
    file_path = "python_backend/prompts/legends.py"
    success = apply_specific_fixes(file_path)
    exit(0 if success else 1)
